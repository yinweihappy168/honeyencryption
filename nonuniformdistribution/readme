1. use generate_mesg_space.py to generate the message space.
2. use generate_prob2pwd_table.py to generate the cumulative-probablity-to-message table that contains mapping of cummulative probability to password messages.
3. run password_test.py to run the honey encryption process. You can change the password to be encrypted by modifying the password_test.py file. but the number should be picked from the message space(000000 to 999999) as shown in the password.txt file.

Defines the Coffee class and defines pdf(msg) and cdf(msg). We consider four coffee types: Capuccino, Latte, Macho and Espresso. At the Coffee class initialisation time, Since Messages in the Coffee message space do not have uniform distribution property and the probabilities are completely random, we Store the PDF of each message into a dictionary and the CDF of each message into another dictionary. The pdf(msg) and cdf(msg) functions calculate the corresponding probabilities by looking up the dictionary. To encrypt a message, the system obtains the pdf and cdf of message by looking up the dictionary. Then it uses the probabilities to determine  the seed range to be mapped and randomly selects a seed from it. The seed is XORed with the key to obtain the cipher. For decryption, we establish a inverse\_table first. The ciphertext is first XORed with the key and get seed. then the seed location is determined, which corresponds to a cummulative probability. Using the cumulative probability, we can find the corresponding plaintext by looking up the inverse\_table.
